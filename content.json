{"meta":{"title":"清海个人博客","subtitle":"","description":"清海个人博客","author":"Tao","url":"http://github.io","root":"/"},"pages":[{"title":"","date":"2022-10-25T12:22:29.779Z","updated":"2022-10-25T12:22:29.779Z","comments":true,"path":"404.html","permalink":"http://github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"archives","date":"2022-10-25T11:49:10.000Z","updated":"2022-10-25T11:49:10.220Z","comments":true,"path":"archives/index.html","permalink":"http://github.io/archives/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2022-10-26T14:58:21.918Z","updated":"2022-10-25T11:57:52.045Z","comments":true,"path":"categories/index.html","permalink":"http://github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2022-10-25T12:18:29.717Z","updated":"2022-10-25T12:18:29.717Z","comments":true,"path":"friends/index.html","permalink":"http://github.io/friends/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-10-25T11:57:22.992Z","updated":"2022-10-25T11:57:22.992Z","comments":true,"path":"tags/index.html","permalink":"http://github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"XSS漏洞详解","slug":"XSS漏洞详解","date":"2022-10-29T13:00:37.000Z","updated":"2022-10-29T13:08:07.058Z","comments":true,"path":"2022/10/29/XSS漏洞详解/","link":"","permalink":"http://github.io/2022/10/29/XSS%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"xss基础​ 跨站脚本攻击(Cross Site Scripting) 因缩写容易和css混淆,所以称为XSS攻击 ​ XSS是前端注入型漏洞 攻击者利用开发人员的疏忽在web页面注入恶意代码(一般为javascript代码)进行攻击。 ​ XSS是针对前端对用户层面的攻击 ​ XSS一般分为三类:存储型,反射型,DOM型 反射型​ 非持久化的攻击,需要受害者去点击构造的恶意url ​ 发起请求并且参数会出现在url上,服务端接收处理后将其内容返回给浏览器端 存储型​ 持久化的攻击,恶意代码被存储在目标站点的服务器中,每次访问对应页面都会触发 svg 和html文件上传 DOM型​ 完全不经过后端,和反射性很相似(可以看作是特殊的反射型xss),通过传入参数,参数被开发使用js将该参数渲染到前端页面上。 payload的构造xss payload 一般是事件或者标签 常用弹窗方式alert ,confirm,prompt, console 1234&lt;script&gt;alert(&quot;1&quot;)&lt;/script&gt; &lt;script&gt;confirm(2)&lt;/script&gt;&lt;script&gt;prompt(3)&lt;/script&gt;&lt;script&gt;console.log(alert(4))&lt;/script&gt; 常用标签和对应事件常见的标签有 a标签,input标签,iframe标签 img标签 无论是什么标签我们要做的就是一件事 闭合前面(引号闭合属性,尖括号闭合标签),构造新的语句(事件或者新的标签) a标签经常使用伪协议来绕过 同样可以使用伪协议的标签有 iframe标签 form表单的action属性(需要配合提交按钮才能触发) a标签中常用的事件 onclick 代码示例 1234伪协议:&lt;a href=&quot;javascript:alert(1)&quot; onclick=&quot;alert(1)&quot;&gt;123&lt;/a&gt;点击事件:&lt;a href=&quot;http://baidu.com&quot; onclick=&quot;alert(1)&quot;&gt;123&lt;/a&gt; input标签input标签是无法使用伪协议的 只能构造事件或者将标签闭合插入新的标签 另外有些情况下 input标签被隐藏,我们可以使用 type&#x3D;text 覆盖 hidden属性 还能直接利用onfocus事件 配合autofocus 自动聚焦 直接不需要点击触发 img标签这个标签 是经常在闭合前面的标签后使用的 1&lt;img src onerror=alert(1)&gt; 其余标签没有很好的例子 就先不做讨论 后续找到相关案例可能会补上 编码绕过有些情况下我们可以使用html实体化编码来绕过对关键字的过滤 这个有些情况我不太理解,另外有的时候无法闭合可以使用’ 来进行闭合 self xss 到可以利用的xss存储型的xss很多情况下都可能只是self xss 我们需要对其进行扩大危害才能证明其是一个有效的漏洞 常用的思路 : 例如搜索历史,因为搜索功能往往会是get传参我们可以利用url来让其不知情的情况下进行了搜索然后触发我们的xss csrf+xss 例如修改名字才能触发的xss 我们制作csrf来让用户的名字修改为我们的xsspayload 绕waf bpass分段传入值 触发xss,利用对方的业务来拼接我们的payload 也可以利用参数来进行分段绕过waf的关键字匹配 xss-labs 通关在了解了基础的知识后可以利用该靶场来巩固加深知识 1-7关第一关: 完全-没有过滤 payload: 1&lt;script&gt;alert(1)&lt;/script&gt; 第二关: 标签 进行了实体化过滤 (htmlentities函数) 但是input标签未作处理 payload: 12&quot; onfocus=alert(1) //&quot;&gt; &lt;script&gt;alert(1)&lt;/script&gt; 第三关:和上关相比 input标签进行了过滤 无法使用双引号但是可以使用单引号闭合value 12&#x27; onfocus=alert(1) //&#x27;&gt; &lt;script&gt;alert(1)&lt;/script&gt; 第四关: input标签过滤了尖括号(&lt; &gt;)但是采用事件一样可以所以上一关的第一个payload直接使用即可 1&#x27; onfocus=alert(1) // 第五关: 进行了匹配关键字过滤(on和script会过滤为o_n scr_ipt) 但是尖括号 “ 都正常 尝试使用不带事件和script的payload 伪协议 1&quot;&gt; &lt;a href=javascript:alert(1)&gt;123// 第六关: 和上关一样也进行了关键字过滤,尝试大小写 发现并没有进行大小写转换 1&quot;&gt; &lt;a Href=javascript:alert(1)&gt;123// 第七关: 对关键字进行了过滤,大小写进行了转换,但是发现对方对关键字是替换为空,尝试进行双写绕过 1&quot; oonnblur=alert(1)// 8-9 关第8关: 添加友情链接,会将你的输入添加到href属性中 尝试javascript:alert(1) 发现 script被过滤为 scr_ipt,开始尝试闭合href 使用事件但是on 也被过滤 尝试进行编码绕过 1java&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;pt:alert(1) 第9关: 还是添加友情连接 尝试上一关的payload发现输出您的链接不合法,怀疑是对其做了校验 尝试后发现只有 添加的数据中带有 http:&#x2F;&#x2F; 时才会正常显示 尝试编码绕过加上http:&#x2F;&#x2F; 1java&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;pt:alert(1) //http:// 10- 14 关第10关: 没有输入框,邮件查看源码发现隐藏的input标签,经过测试三个参数后发现只有t_sort会被输出到input标签,闭合引号构造事件 1&quot; onblur=alert(1) type=text// 第11关:同上关,发现新增的参数t_ref,尝试get请求但是没有输出,根据其意思猜测为数据请求包的ref字段,burp抓包修改ref字段为paylaod成功 1&quot; onblur=alert(1) type=text// 第12关:同上关,ua头参数 第13关:同上,cookie修改为paylaod 第14关: 代码中的网址失效 无法进行测试 15关第15关:什么也没有,但是F12阅读源码发现包含了 angular.min.js这个框架并且使用了 ng-include: 怀疑这里存在参数 fuzz 发现参数是src 并且参数值会被带入 ng-include 所以我们利用该参数包含之前关卡页面实现xss 1?src=&#x27;level1.php?name=&lt;img src=x onerror=alert(xss)&gt;&#x27; 16关只有一个输出点 尝试直接使用script标签 发现被过滤 尝试其他标签 img标签 发现正常但是空格会被过滤导致不能生效 产生 17关两个参数会被接收组合在embed标签 ,同input标签一样使用引号闭合前面 构造事件进行弹窗 1?arg01=1&amp;arg02=&quot;2 onfocus=alert(1)// 18关和上一关一摸一样 直接使用上一关的payload 19关和20关较为复杂先不研究xss的危害12345678910111、网络钓鱼，包括盗取各类用户账号；2、窃取用户cookies资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作；3、劫持用户(浏览器)会话，从而执行任意操作，例如进行非法转账、强制发表日志、发送电子邮件等；4、强制弹出广告页面、刷流量等；5、网页挂马，进行恶意操作，例如任意篡改页面信息、删除文章等；6、进行大量的客户端攻击，如DDoS攻击；7、获取客户端信息，例如用户的浏览历史、真实IP、开放端口等；8、控制受害者机器向其他网站发起攻击；9、结合其他漏洞，如CSRF漏洞，实施进一步作恶；10、提升用户权限，包括进一步渗透网站；11、传播跨站脚本蠕虫等； 理论上很多但是大部分情况下也就是打cookie","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"xss","slug":"xss","permalink":"http://github.io/tags/xss/"}]},{"title":"test","slug":"test","date":"2022-10-27T02:35:00.000Z","updated":"2022-10-27T02:39:02.376Z","comments":true,"path":"2022/10/27/test/","link":"","permalink":"http://github.io/2022/10/27/test/","excerpt":"","text":"这是一篇测试文章test","categories":[{"name":"测试","slug":"测试","permalink":"http://github.io/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://github.io/tags/%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"测试","slug":"测试","permalink":"http://github.io/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"xss","slug":"xss","permalink":"http://github.io/tags/xss/"},{"name":"测试","slug":"测试","permalink":"http://github.io/tags/%E6%B5%8B%E8%AF%95/"}]}